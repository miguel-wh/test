
openapi: 3.0.0
servers:
  - url: //subdomain.adminolt.com/api
    description: Default server
info:
  description: |
    This is a sample server Petstore server.
    You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
    For this sample, you can use the api key `special-key` to test the authorization filters.
    # Introduction
    This API is documented in **OpenAPI format** and is based on
    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
    tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).
    # OpenAPI Specification
    This API is documented in **OpenAPI format** and is based on
    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
    tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).
    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
  version: 1.0.0
  title: Api AdminOLT
  termsOfService: 'https://adminolt.com/documentacion/terminos-y-condiciones-de-uso-5/'
  contact:
    name: API Support AdminOLT
    email: apiteam@adminolt.com
    url: https://adminolt.com/
  x-logo:
    url: 'https://admin.adminolt.com/static/img/logo.84639b0d929a.png'
    altText: AdminOLT logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Zones
    description: Everything about your Zones
  - name: OLT
    description: Everything about your OLTs
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
x-tagGroups:
  - name: Sistema
    tags:
      - Zones
      - OLT
  - name: General
    tags:
      - pet
      - store
  - name: User Management
    tags:
      - user
paths:
  /zones/:
    get:
      tags:
      - Zones
      summary: Get all zones
      description: Return all zones
      operationId: getZonesAll
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZoneResponse'
        '203':
          description: Non-Authoritative Information
          content:
            application/json:
              example:
                message_status: "El token enviado no es valido"      
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Las credenciales de autenticaci贸n no se proveyeron."
        '405':
          description: Method Not Allowed
          content:
            application/json:
              example:
                detail: "Metodo {{put,post,delete}} no permitido"
      x-code-samples:
        - lang: Python
          source: |
            import requests
            endpoint = "https://{{subdomain}}.adminolt.com/api/zones/"
            headers = {
                "Authorization": "Token {{token}}" 
            }
            response = requests.get(url=endpoint, headers=headers)
            print(response.content)
      security:
        - api_key: []
    post:
      tags:
        - Zones
      summary: Add a new zone
      description: Add new zone.
      operationId: addZone
      requestBody:
        $ref: '#/components/requestBodies/ZoneRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZoneResponse'
        '203':
          description: Non-Authoritative Information
          content:
            application/json:
              example:
                message_status: "El token enviado no es valido"
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                name: [
                  "Este campo es requerido"
                ]
        '401': 
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Las credenciales de autenticaci贸n no se proveyeron."
        '405':
          description: Method Not Allowed
          content:
            application/json:
              example:
                detail: "Metodo {{put,get,delete}} no permitido"
      x-code-samples:
        - lang: Python
          source: |
            import requests
            endpoint = "https://{{subdomain}}.adminolt.com/api/zones/"
        
            headers = {
                "Authorization": "Token {{token}}" 
            }
            
            data = {
                "name": "Zone 1",
                "description": "This is my Zone"
            }
            
            response = requests.post(url=endpoint, headers=headers, data=data)
            print(response.content)
      security:
        - api_key: []
  '/zones/{zone_id}/':
    get:
      tags:
      - Zones
      summary: Get a zone by ID
      description: Return a zone by ID. If ID doesn't exist get all the zones 
      operationId: getZonesByID
      parameters:
        - name: zone_id
          in: path
          description: ID of zone to return
          required: true
          schema:
            type: integer
            format: number
      responses:
        '200':
          description: 'Successful Operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZoneResponse'
        '203':
          description: Non-Authoritative Information
          content:
            application/json:
              example:
                message_status: "El token enviado no es valido"      
        '401': 
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Las credenciales de autenticaci贸n no se proveyeron."
        '404': 
          description: Not Found
          content:
            application/json:
              example:
                detail: "No encontrado."
        '405':
          description: Method Not Allowed
          content:
            application/json:
              example:
                detail: "Metodo {{put,post,delete}} no permitido"
      x-code-samples:
        - lang: Python
          source: |
            import requests
            endpoint = "https://{{subdomain}}.adminolt.com/api/zones/{{zone_id}}"
            headers = {
                "Authorization": "Token {{token}}" 
            }
            response = requests.get(url=endpoint, headers=headers)
            print(response.content)
      security:
        - api_key: []
    put:
      tags:
      - Zones
      summary: Updates an existing zone by ID
      description: 'Modify data of a zone by ID'
      operationId: updateZones
      parameters:
        - name: zone_id
          in: path
          description: ID of zone to return
          required: true
          schema:
            type: integer
            format: number
      requestBody:
        $ref: '#/components/requestBodies/ZoneRequestUpdate'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZoneResponseUpdate'
        '203':
          description: Non-Authoritative Information
          content:
            application/json:
              example:
                message_status: "El token enviado no es valido"
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                name: [
                  "Este campo es requerido"
                ]
        '401': 
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Las credenciales de autenticaci贸n no se proveyeron."
        '404': 
          description: Not Found
          content:
            application/json:
              example:
                detail: "No encontrado."
        '405':
          description: Method Not Allowed
          content:
            application/json:
              example:
                detail: "Metodo {{post,get,delete}} no permitido"
      x-code-samples:
        - lang: Python
          source: |
            import requests
            endpoint = "https://{{subdomain}}.adminolt.com/api/zones/{{zone_id}}"
            
            headers = {
                "Authorization": "Token {{token}}" 
            }
            
            data = {
                "name": "Zone 1-1",
                "description": "This is my new Zone"
            }
            
            response = requests.put(url=endpoint, headers=headers, data=data)
            print(response.content)
      security:
        - api_key: []
    delete:
      tags:
        - Zones
      summary: Deletes a zone by ID
      description: 'Deletes a zone by ID'
      operationId: deleteZone
      parameters:
        - name: zone_id
          in: path
          description: ID of zone to delete
          required: true
          schema:
            type: integer
            format: number
      responses:
        '200':
          description: 'Successful Operation'
          content:
            application/json:
              example: {
                "message": "Zona eliminada exitosamente"
              }
        '203':
          description: Non-Authoritative Information
          content:
            application/json:
              example:
                message_status: "El token enviado no es valido"
        '401': 
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Las credenciales de autenticaci贸n no se proveyeron."
        '404': 
          description: Not Found
          content:
            application/json:
              example:
                detail: "No encontrado."
        '405':
          description: Method Not Allowed
          content:
            application/json:
              example:
                detail: "Metodo {{put,post,get}} no permitido"
      x-code-samples:
        - lang: Python
          source: |
            import requests
            endpoint = "https://{{subdomain}}.adminolt.com/api/zones/{{zone_id}}"
            
            headers = {
                "Authorization": "Token {{token}}" 
            }
            
            response = requests.delete(url=endpoint, headers=headers)
            print(response.content)
      security:
        - api_key: []
  /olt-list/: 
    !include olltget.yaml
  
  /pet:
    parameters:
      - name: cookieParam
        in: cookie
        description: Some cookie
        required: true
        schema:
          type: integer
          format: int64
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add new pet to the store inventory.
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      x-code-samples:
        - lang: 'C#'
          source: |
            PetStore.v1.Pet pet = new PetStore.v1.Pet();
            pet.setApiKey("your api key");
            pet.petType = PetStore.v1.Pet.TYPE_DOG;
            pet.name = "Rex";
            // set other fields
            PetStoreResponse response = pet.create();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Successfully created
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      x-code-samples:
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetId(1);
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->update($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          deprecated: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
          example: "Bearer <TOKEN>"
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          schema:
            type: array
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma seperated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      deprecated: true
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content:
            application/json:
              example:
                status: 400
                message: "Invalid Order"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when toekn expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: OK
            application/xml:
              schema:
                type: string
              examples:
                response:
                  value:  <Message> OK </Message>
            text/plain:
              examples:
                response:
                  value:  OK
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Dog:
      description: A representation of a dog
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            packSize:
              type: integer
              format: int32
              description: The size of the pack the dog is from
              default: 1
              minimum: 1
          required:
            - packSize
    HoneyBee:
      description: A representation of a honey bee
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            honeyPerDay:
              type: number
              description: Average amount of honey produced per day in ounces
              example: 3.14
          required:
            - honeyPerDay
    Id:
      type: integer
      format: int64
      readOnly: true
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
      xml:
        name: Order
    ZoneRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of Zone
          minLength: 8
          example: string
        description:
          type: string
          description: Description of Zone
          minLength: 8
          example: string
    ZoneResponse:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: Zone ID
          minLength: 1
          example: 1
        name:
          type: string
          description: Name of Zone
          minLength: 8
          example: Zone 1
        description:
          type: string
          description: Description of Zone
          minLength: 8
          example: This is my Zones
    ZoneRequestUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of Zone
          minLength: 8
          example: Zone 1
        description:
          type: string
          description: Description of Zone
          minLength: 8
          example: This is my new Zone
    ZoneResponseUpdate:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: Zone ID
          minLength: 1
          example: 1
        name:
          type: string
          description: Name of Zone
          minLength: 8
          example: Zone 1
        description:
          type: string
          description: Description of Zone
          minLength: 8
          example: This is my new Zone
    OLTRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of OLT
          minLength: 8
          example: string
        description:
          type: string
          description: Description of OLT
          minLength: 8
          example: string
    OLTResponse:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: OLT ID
          minLength: 1
          example: 1
        name:
          type: string
          description: Name of OLT
          minLength: 8
          example: OLT VSOL GPON
        host:
          type: string
          description: IP Connection
          minLength: 8
          example: 172.28.33.195
        
        plan:
          properties:
            id:
              type: integer
              description: Plan ID
              minLength: 1
              example: 1
            name:
              type: string
              description: Name of Plan
              minLength: 8
              example: 10 USD
            price:
              type: string
              description: Price of Plan
              minLength: 8
              example: 10.00
        
        hardware_version:
          properties:
            id:
              type: integer
              description: Hardware Version ID
              minLength: 1
              example: 1
            model:
              type: string
              description: Model of Hardware Version
              minLength: 8
              example: Vsol-V1600G0
            brand:
              type: string
              description: Brand of Hardware Version
              minLength: 8
              example: Vsol
              
        software_version:
          properties:
            id:
              type: integer
              description: Software Version ID
              minLength: 1
              example: 1
            model:
              type: string
              description: Model of Software Version
              minLength: 8
              example: Vsol-V1600G0
            version:
              type: string
              description: Version of Software Version
              minLength: 8
              example: 2.x
        
          
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bee: '#/components/schemas/HoneyBee'
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        category:
          description: Categories this pet belongs to
          allOf:
            - $ref: '#/components/schemas/Category'
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          minItems: 1
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        pet:
          oneOf:
            - $ref: '#/components/schemas/Pet'
            - $ref: '#/components/schemas/Tag'
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
        phone:
          description: User phone number in international format
          type: string
          pattern: '^\+(?:[0-9]-?){6,14}[0-9]$'
          example: +1-202-555-0192
          nullable: true
        userStatus:
          description: User status
          type: integer
          format: int32
      xml:
        name: User
  requestBodies:
    ZoneRequest:
      content:
        application/json:
          schema:
            allOf:
              - description: My Zone
                title: Zone
              - $ref: '#/components/schemas/ZoneRequest'
      description: Zone object that needs to be added to the system
      required: true
    ZoneRequestUpdate:
      content:
        application/json:
          schema:
            allOf:
              - description: My Zone
                title: Zone
              - $ref: '#/components/schemas/ZoneRequest'
      description: Zone object that needs to be update to the system
      required: true
    Pet:
      content:
        application/json:
          schema:
            allOf:
              - description: My Pet
                title: Pettie
              - $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: 'object'
            properties:
              name:
                type: string
                description: hooray
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: api_key
      in: header
